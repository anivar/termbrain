name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Validate version
      run: |
        # Check if version in package.json matches
        PACKAGE_VERSION=$(jq -r .version package.json)
        if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
          echo "Error: package.json version ($PACKAGE_VERSION) doesn't match tag version (${{ steps.version.outputs.version }})"
          exit 1
        fi

    - name: Run tests
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 jq
        ./tests/run_all_tests.sh

    - name: Create tarball
      run: |
        VERSION=${{ steps.version.outputs.version }}
        mkdir -p dist
        tar -czf dist/termbrain-${VERSION}.tar.gz \
          --exclude='.git*' \
          --exclude='dist' \
          --exclude='*.db' \
          --exclude='test-*' \
          --exclude='.termbrain' \
          .

    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ steps.version.outputs.version }}
        # Extract changelog for this version
        awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > release-notes.md
        
        # If empty, use a default message
        if [ ! -s release-notes.md ]; then
          echo "Release $VERSION" > release-notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Termbrain v${{ steps.version.outputs.version }}
        body_path: release-notes.md
        files: |
          dist/termbrain-${{ steps.version.outputs.version }}.tar.gz
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}

    - name: Publish to NPM
      run: |
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  homebrew:
    name: Update Homebrew Formula
    needs: release
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, '-') }}  # Skip for pre-releases
    
    steps:
    - name: Checkout tap repository
      uses: actions/checkout@v4
      with:
        repository: anivar/homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

    - name: Update formula
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        URL="https://github.com/anivar/termbrain/releases/download/v${VERSION}/termbrain-${VERSION}.tar.gz"
        
        # Download and calculate SHA256
        wget -q "$URL"
        SHA256=$(sha256sum "termbrain-${VERSION}.tar.gz" | cut -d' ' -f1)
        
        # Update formula
        sed -i "s|url \".*\"|url \"$URL\"|" Formula/termbrain.rb
        sed -i "s|sha256 \".*\"|sha256 \"$SHA256\"|" Formula/termbrain.rb
        sed -i "s|version \".*\"|version \"$VERSION\"|" Formula/termbrain.rb

    - name: Commit and push
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add Formula/termbrain.rb
        git commit -m "Update Termbrain to ${GITHUB_REF#refs/tags/v}"
        git push

  announce:
    name: Announce Release
    needs: [release, homebrew]
    runs-on: ubuntu-latest
    
    steps:
    - name: Post to Discord/Slack
      run: |
        echo "Would post release announcement to Discord/Slack"
        # Add webhook integration here

    - name: Update documentation site
      run: |
        echo "Would trigger docs site rebuild"
        # Add docs deployment trigger here